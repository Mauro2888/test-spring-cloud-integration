/**
 * MappingMapToOutput.java
 *
 * This file was generated by MapForce 2018r2.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */
package com.test.integration.spring.testspringcloudintegration.Mapping;
import com.altova.mapforce.*;
import com.altova.types.*;
import com.altova.xml.*;
import com.altova.text.tablelike.*;
import com.altova.text.*;
import com.altova.text.edi.*;
import java.util.*;

public class MappingMapToOutput extends com.altova.TraceProvider 
{
	private boolean runDoesCloseAll = true;
	public void setCloseObjectsAfterRun(boolean c) {runDoesCloseAll = c;}
	public boolean getCloseObjectsAfterRun() {return runDoesCloseAll;}

	
	static class main implements IEnumerable
	{
		IMFNode var1_test_file_Instance;
	
		public main(IMFNode var1_test_file_Instance)
		{
			this.var1_test_file_Instance = var1_test_file_Instance;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 2;
			Object current;
			main closure;
			IEnumerator var2_accenture;
			public Enumerator(main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_2() throws Exception {
				state = 3;				
				var2_accenture = (com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("accenture", ""), closure.var1_test_file_Instance)).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 3;				
				if (!var2_accenture.moveNext()) {state = 4; return false; }
				current = com.altova.functions.Core.createElement("Rows", com.altova.functions.Core.box(com.altova.functions.Core.createElement("Nome", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements(com.altova.functions.Core.createQName("nome", ""), ((IMFNode)(var2_accenture.current())))))))));
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				if( var2_accenture != null ) { var2_accenture.close(); var2_accenture = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_accenture != null ) { var2_accenture.close(); var2_accenture = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class Outer implements IEnumerable
	{
		IMFNode var1_test_file_Instance;
	
		public Outer(IMFNode var1_test_file_Instance)
		{
			this.var1_test_file_Instance = var1_test_file_Instance;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			Outer closure;
			IEnumerator var2_map;
			public Enumerator(Outer closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_map = ((new main(closure.var1_test_file_Instance))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_map.moveNext()) {state = 3; return false; }
				current = var2_map.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_map != null ) { var2_map.close(); var2_map = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_map != null ) { var2_map.close(); var2_map = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}



	// instances
	protected org.w3c.dom.Node vartest_file2Instance;

	public void run(String test_file2SourceFilename, String Output2TargetFilename) throws Exception {
		// open source streams
		writeTrace("Loading " + test_file2SourceFilename + "...\n");
		com.altova.io.FileInput test_file2Source = new com.altova.io.FileInput(test_file2SourceFilename);
		// open target stream
		com.altova.io.FileOutput Output2Target = new com.altova.io.FileOutput(Output2TargetFilename);

		// run
	
		run(test_file2Source, Output2Target);

		// close source streams
		test_file2Source.close();
		// close target stream
		writeTrace("Saving " + Output2TargetFilename + "...\n");
		Output2Target.close();
	}


	// main entry point

	public void run(com.altova.io.Input test_file2Source, com.altova.io.Output Output2Target) throws Exception {
		// Open the source(s)
		org.w3c.dom.Document doc_test_file2 = XmlTreeOperations.loadDocument(test_file2Source);
		vartest_file2Instance = doc_test_file2;
		if (runDoesCloseAll)
			test_file2Source.close();

		// Create the target
		com.test.integration.spring.testspringcloudintegration.Mapping.Output.OutputDocument  Output2TargetDoc = new com.test.integration.spring.testspringcloudintegration.Mapping.Output.OutputDocument(com.test.integration.spring.testspringcloudintegration.Mapping.Output.Output_TypeInfo.binder.getTypes()[com.test.integration.spring.testspringcloudintegration.Mapping.Output.Output_TypeInfo._altova_ti_altova_RowsType],0);
		Table Output2TargetObject = Output2TargetDoc;
			Output2TargetDoc.getFormat().setAssumeFirstRowAsHeaders( false );
			Output2TargetDoc.getFormat().setFieldDelimiter( ',' );
			Output2TargetDoc.getFormat().setRemoveEmpty( true );
			Output2TargetDoc.getFormat().setQuoteCharacter( '\"' );

		// Execute mapping

		main mapping = new main(new DOMDocumentAsMFNodeAdapter(vartest_file2Instance, test_file2Source.getFilename()));

		MFTextWriter.write(mapping, Output2TargetObject);
		// Close the target
		Output2TargetDoc.setEncoding( "UTF-8", false, false );
		Output2TargetDoc.save(Output2Target);

		
		if (runDoesCloseAll)
		{
			test_file2Source.close();
			Output2Target.close();
		}
	}



}
